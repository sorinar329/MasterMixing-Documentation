@article{Ohene2017,
  author  = "Michael Ohene",
  title   = "A Proposed General Formula to Create and
Analyze Baking Recipes",
  year    = 2017,
  link = https://ceur-ws.org/Vol-2028/paper28.pdf
}

@misc{Oxford,
  author={Oxford English Dictionary},
  title={mix VERB, Meaning and use},
  year={2002},
  note = {\url{https://www.oed.com/dictionary/mix_v?tab=meaning_and_use} [Accessed: 03.05.2024]}

  }

@misc{FrameNet,
  title        = {FrameNet},
  author       = {Berkely, University of California},
  note         = {\url{https://framenet.icsi.berkeley.edu/} [Accessed: 03.05.2024]}
}

@misc{WordNet,
  title        = {WordNet, A Lexical Database for English},
  author       = {Princeton University},
  note         = {\url{https://wordnet.princeton.edu/} [Accessed: 03.05.2024]}
}


@misc{wikihow,
  title        = {wikiHow},
  note         = {\url{https://www.wikihow.com/Main-Page} [Accessed: 03.05.2024]}
}

@misc{pycram,
  title        = {PyCram},
  note         = {\url{https://github.com/cram2/pycram} [Accessed: 03.05.2024]}
}

@software{ros,
  author = {{Stanford Artificial Intelligence Laboratory et al.}},
  title = {Robotic Operating System},
  url = {https://www.ros.org},
  version = {ROS Melodic Morenia},
  date = {2018-05-23},
} 

@misc{pr2,
  title        = {PR2},
  note         = {\url{https://robotsguide.com/robots/pr2} [Accessed: 03.05.2024]}
}

@InProceedings{beetz10cram,
  author  = {Michael Beetz and Lorenz M\"osenlechner and Moritz Tenorth},
  title = {{CRAM -- A Cognitive Robot Abstract Machine for Everyday Manipulation in Human Environments}},
  booktitle = {IEEE/RSJ International Conference on Intelligent Robots and Systems},
  year = {2010},
  pages = {1012-1017},
  month     = {October 18-22},
  address   = {Taipei, Taiwan},
  bib2html_pubtype = {Conference Paper},
  bib2html_groups = {K4C,Cogito},
  bib2html_funding = {CoTeSys},
  bib2html_rescat = {Reasoning, Planning},
  bib2html_domain = {Assistive Household}
}


@misc{ontologyexample,
  title        = {Representing Classes As Property Values on the Semantic Web},
  author = {W3C Working Group},
  year = {2005},
  note         = {\url{https://www.w3.org/TR/2005/NOTE-swbp-classes-as-values-20050405/
} [Accessed: 03.05.2024]}
}

@electronic{Horrocks2004,
  abstract = {This document contains a proposal for a Semantic Web Rule Language (SWRL) based on a combination of the OWL DL and OWL Lite sublanguages of the OWL Web Ontology Language with the Unary/Binary Datalog RuleML sublanguages of the Rule Markup Language. SWRL includes a high-level abstract syntax for Horn-like rules in both the OWL DL and OWL Lite sublanguages of OWL. A model-theoretic semantics is given to provide the formal meaning for OWL ontologies including rules written in this abstract syntax. An XML syntax based on RuleML and the OWL XML Presentation Syntax as well as an RDF concrete syntax based on the OWL RDF/XML exchange syntax are also given, along with several examples.},
  added-at = {2011-10-07T14:24:46.000+0200},
  author = {Horrocks, Ian and Patel-Schneider, Peter F. and Boley, Harold and Tabet, Said and Grosofand, Benjamin and Dean, Mike},
  biburl = {https://www.bibsonomy.org/bibtex/2fceb3fd8a7b2c1f070893e5b43eafbdd/mareike_bib},
  howpublished = {W3C Member Submission},
  interhash = {19b1e1c73e515876cfbeb0f5a281ba7a},
  intrahash = {fceb3fd8a7b2c1f070893e5b43eafbdd},
  keywords = {Rules SWRL language rule semanticweb},
  month = may,
  note = {Last access on Dez 2008 at: http://www.w3.org/Submission/SWRL/},
  organization = {W3C},
  timestamp = {2011-12-22T10:06:27.000+0100},
  title = {{SWRL}: A Semantic Web Rule Language Combining {OWL} and {RuleML}},
  url = {http://www.w3.org/Submission/SWRL/},
  year = 2004
}

@software{wikihow-extraction,
  title = {WikiHow Instruction Analysis for Robot Manipulation},
  url = {https://github.com/Food-Ninja/WikiHow-Instruction-Extraction},
  date = {2018-05-23},
} 

@article{LAMY201711,
title = {Owlready: Ontology-oriented programming in Python with automatic classification and high level constructs for biomedical ontologies},
journal = {Artificial Intelligence in Medicine},
volume = {80},
pages = {11-28},
year = {2017},
issn = {0933-3657},
doi = {https://doi.org/10.1016/j.artmed.2017.07.002},
url = {https://www.sciencedirect.com/science/article/pii/S0933365717300271},
author = {Jean-Baptiste Lamy},
keywords = {Semantic web, Ontology-oriented programming, Automatic classification, Local closed world reasoning, Biomedical ontology, OWL},
abstract = {Objective
Ontologies are widely used in the biomedical domain. While many tools exist for the edition, alignment or evaluation of ontologies, few solutions have been proposed for ontology programming interface, i.e. for accessing and modifying an ontology within a programming language. Existing query languages (such as SPARQL) and APIs (such as OWLAPI) are not as easy-to-use as object programming languages are. Moreover, they provide few solutions to difficulties encountered with biomedical ontologies. Our objective was to design a tool for accessing easily the entities of an OWL ontology, with high-level constructs helping with biomedical ontologies.
Methods
From our experience on medical ontologies, we identified two difficulties: (1) many entities are represented by classes (rather than individuals), but the existing tools do not permit manipulating classes as easily as individuals, (2) ontologies rely on the open-world assumption, whereas the medical reasoning must consider only evidence-based medical knowledge as true. We designed a Python module for ontology-oriented programming. It allows access to the entities of an OWL ontology as if they were objects in the programming language. We propose a simple high-level syntax for managing classes and the associated “role-filler” constraints. We also propose an algorithm for performing local closed world reasoning in simple situations.
Results
We developed Owlready, a Python module for a high-level access to OWL ontologies. The paper describes the architecture and the syntax of the module version 2. It details how we integrated the OWL ontology model with the Python object model. The paper provides examples based on Gene Ontology (GO). We also demonstrate the interest of Owlready in a use case focused on the automatic comparison of the contraindications of several drugs. This use case illustrates the use of the specific syntax proposed for manipulating classes and for performing local closed world reasoning.
Conclusion
Owlready has been successfully used in a medical research project. It has been published as Open-Source software and then used by many other researchers. Future developments will focus on the support of vagueness and additional non-monotonic reasoning feature, and automatic dialog box generation.}
}

@software{Krech_RDFLib_2023,
author = {Krech, Daniel and Grimnes, Gunnar AAstrand and Higgins, Graham and Hees, Jörn and Aucamp, Iwan and Lindström, Niklas and Arndt, Natanael and Sommer, Ashley and Chuc, Edmond and Herman, Ivan and Nelson, Alex and McCusker, Jamie and Gillespie, Tom and Kluyver, Thomas and Ludwig, Florian and Champin, Pierre-Antoine and Watts, Mark and Holzer, Urs and Summers, Ed and Morriss, Whit and Winston, Donny and Perttula, Drew and Kovacevic, Filip and Chateauneu, Remi and Solbrig, Harold and Cogrel, Benjamin and Stuart, Veyndan},
doi = {10.5281/zenodo.6845245},
month = aug,
title = {{RDFLib}},
url = {https://github.com/RDFLib/rdflib},
version = {7.0.0},
year = {2023}
}